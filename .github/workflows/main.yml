name: ci

on:
    push:
        branches: [main, staging]

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            # Clones repository into the runner's filesystem
            - name: Checkout code
              uses: actions/checkout@v2

            # Sets up a Node.js environment on the runner
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '16'

            - name: Install dependencies
              run: echo $HOME && npm install

    test:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '16'

            - name: Install dependencies
              run: npm install

            - name: Run tests with coverage
              run: npm test -- --coverage

            - name: Upload coverage report as an artifact
              uses: actions/upload-artifact@v2
              with:
                  name: coverage-report
                  path: coverage/

    docker:
        needs: test
        runs-on: ubuntu-latest
        # Ensure docker only happens from the main branch
        if: github.ref == 'refs/heads/main'
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Login to DockerHub
              uses: docker/login-action@v1
              with:
                  # Github.com --> [My repository] --> Settings --> Secrets and Variables
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Echo DockerHub Username
              run: echo "Username is $DOCKERHUB_USERNAME"
              env:
                  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

            - name: Build, tag, and push image to DockerHub
              run: |
                  docker build --platform linux/amd64 -t $DOCKERHUB_USERNAME/$IMAGE_NAME:latest .
                  docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:latest
              env:
                  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
                  IMAGE_NAME: ci-cd-demo

    kubernetes: # do not run this. I do not want to deploy a K8s cluster right now.
        needs: docker
        runs-on: ubuntu-latest
        # Ensure kubernetes only happens from the main branch
        if: github.ref == -1
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up kubectl
              uses: azure/setup-kubectl@v1

            - name: Decode kubeconfig and set up Kubernetes context
              run: |
                  mkdir -p $HOME/.kube
                  echo "$KUBECONFIG_ENCODED" | base64 --decode > $HOME/.kube/config
                  kubectl config view
              env:
                  KUBECONFIG_ENCODED: ${{ secrets.KUBECONFIG }}

            - name: Deploy to Kubernetes
              run: |
                  kubectl apply -f k8s/deployment.yml
                  kubectl apply -f k8s/service.yml
